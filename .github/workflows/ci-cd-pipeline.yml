name: Pipeline CI/CD Python App

on:
  push:
    branches:
      - main  # Trigger the workflow on push to main branch

jobs:
  # ✅ Run Unit Tests
  unit-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4  # Checkout the code from the repo

      - name: Set up Python
        uses: actions/setup-python@v4  # Set up Python environment
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m venv venv  # Create a virtual environment
          source venv/bin/activate
          pip install -r requirements.txt  # Install Python dependencies

      - name: Run unit tests
        run: |
          source venv/bin/activate
          pytest  # Run tests using pytest

  # ✅ Build and Push Docker Image
  build-and-push-job:
    runs-on: ubuntu-latest
    needs: [unit-test-job]  # Wait for unit tests to complete
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4  # Checkout the code again for this job

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .  # Build Docker image

      - name: Login to Docker Hub
        uses: docker/login-action@v3  # Log in to Docker Hub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image 
        run: docker push ${{ env.IMAGE_NAME }}  # Push image to Docker Hub

  # ✅ Deploy to VPS
  deploy-job:
    runs-on: ubuntu-latest
    needs: build-and-push-job  # Wait for image to be pushed
    steps:
      - name: Connect to the VPS using SSH
        uses: appleboy/ssh-action@master  # SSH into VPS
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
              docker pull ${{ env.IMAGE_NAME }}  # Pull latest image from Docker Hub

              # Remove old container
              docker rm -f python-app

              # Run new container with updated image
              docker run -d --name python-app -p 5005:5001 ${{ env.IMAGE_NAME }}

              docker ps  # List running containers
              sudo docker image prune -f  # Remove unused images
